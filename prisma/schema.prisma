generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "postgres"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Board {
  id         Int       @id @default(autoincrement())
  uuid       String    @unique @db.Char(36)
  created_at DateTime? @default(now()) @db.Timestamp(0)
  updated_at DateTime? @default(now()) @db.Timestamp(0)
  name       String    @db.VarChar(255)
  userId     String
  columns    Column[]  @relation("BoardColumn")
  user       User      @relation(fields: [userId], references: [id])

  @@index([userId])
}

model Column {
  id         Int       @id @default(autoincrement())
  uuid       String    @unique @db.Char(36)
  created_at DateTime? @default(now()) @db.Timestamp(0)
  updated_at DateTime? @default(now()) @db.Timestamp(0)
  name       String    @db.VarChar(255)
  board_uuid String
  position   Int
  color      String    @db.VarChar(255)
  userId     String
  board      Board     @relation("BoardColumn", fields: [board_uuid], references: [uuid], onDelete: Cascade)
  tasks      Task[]    @relation("ColumnTask")

  @@index([board_uuid])
}

model Task {
  id          Int       @id @default(autoincrement())
  uuid        String    @unique @db.Char(36)
  created_at  DateTime? @default(now()) @db.Timestamp(0)
  updated_at  DateTime? @default(now()) @db.Timestamp(0)
  name        String    @db.VarChar(255)
  description String?   @db.VarChar(1023)
  position    Int
  column_uuid String
  userId      String
  column      Column    @relation("ColumnTask", fields: [column_uuid], references: [uuid], onDelete: Cascade)
  subtasks    Subtask[] @relation("TaskSubtask")

  @@index([column_uuid])
}

model Subtask {
  id         Int       @id @default(autoincrement())
  uuid       String    @unique @db.Char(36)
  created_at DateTime? @default(now()) @db.Timestamp(0)
  updated_at DateTime? @default(now()) @db.Timestamp(0)
  name       String    @db.VarChar(255)
  task_uuid  String
  completed  Boolean   @default(false)
  userId     String
  task       Task      @relation("TaskSubtask", fields: [task_uuid], references: [uuid], onDelete: Cascade)

  @@index([task_uuid])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  Board         Board[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
